# Working with SQL in `pyspark`

## Introduction

```{python}
#| include: false
from pyspark.sql import SparkSession
spark = SparkSession\
  .builder\
  .config("spark.sql.catalogImplementation","hive")\
  .getOrCreate()

sc = spark.sparkContext
sc.setLogLevel("OFF")

from datetime import date
from pyspark.sql import Row

data = [
  Row(id = 1, value = 28.3, date = date(2021,1,1)),
  Row(id = 2, value = 15.8, date = date(2021,1,1)),
  Row(id = 3, value = 20.1, date = date(2021,1,2)),
  Row(id = 4, value = 12.6, date = date(2021,1,3))
]

df = spark.createDataFrame(data)
```

As we discussed in @sec-introd-spark, Spark is a **multi-language** engine for large-scale data processing. This means that we can build our Spark application using many different languages (like Java, Scala, Python and R). Furthermore, you can also use the Spark SQL module of Spark to translate all of your transformations into pure SQL queries.

In more details, Spark SQL is a Spark module for structured data processing [@sparkdoc]. In other words, it is a module to work with Spark DataFrames, using SQL. This also means, that you can translate all transformations that you build with the DataFrame API, into a SQL query in Spark.

However, this also means that the Spark SQL module does not handle the transformations produced by the unstructured APIs of Spark, i.e. the Dataset API. Since the Dataset API is not available in `pyspark`, it is not covered in this book.

In essence, you can mix python code with SQL queries very easily in Spark, and virtually all transformations exposed throughout this book, can be translated into a SQL query using this module of Spark. We will focus a lot on this exchange between Python and SQL in this chapter.

## The `sql()` method as the main entrypoint

The main entrypoint to Spark SQL is the `sql()` method of your Spark Session. This method accepts a SQL query inside a string as input, and will always output a new Spark DataFrame as result. That is why I used the `show()` method right after `sql()`, in the example below, to see what this new Spark DataFrame looked like.

As a first example, lets run a very basic SQL query, that just select a list of code values:

```{python}
sql_query = '''
SELECT *
FROM (
  VALUES (11), (31), (24), (35)
) AS List(Codes)
'''

spark.sql(sql_query).show()
```

If you want to execute a very short SQL query, is fine to write it inside a single pair of quotation marks (for example `"SELECT * FROM sales.per_day"`). However, since SQL queries usually take multiple lines, you can write your SQL query inside a python docstring (created by a pair of three quotation marks), like in the example above.

Having this in mind, every time you want to execute a SQL query, you can use this `sql()` method from the object you stored your Spark Session. The `sql()` method is the bridge between `pyspark` and SQL. You give it a pure SQL query inside a string, and, Spark will execute it, considering your Spark SQL context.


## Creating SQL Tables in Spark

In real life jobs at the industry, is very likely that your data will be allocated inside a SQL-like database. Spark can connect to a external SQL database through JDBC/ODBC connections, or, read tables from Apache Hive. This way, you can sent your SQL queries to this external database.

However, to expose more simplified examples throughout this chapter, we will use `pyspark` to create a simple temporary SQL table in our Spark SQL context, and use this temporary SQL table in our examples of SQL queries. This way, we avoid the work to connect to some existing SQL database, and, still get to learn how to use SQL queries in `pyspark`.

First, lets create our Spark Session. You can see below that I used the `config()` method to set a specific option of the session called `spark.sql.catalogImplementation`, to the value `"hive"`. This option controls the implementation of the Spark SQL Catalog, which is a core part of the SQL functionality of Spark [^06-dataframes-sql-catalog].

[^06-dataframes-sql-catalog]: There are some very good materials explaining what is the Spark SQL Catalog, and which is the purpose of it. For a soft introduction, I recommend Sarfaraz Hussain post: <https://medium.com/@sarfarazhussain211/metastore-in-apache-spark-9286097180a4>. For a more technical introduction, see <https://jaceklaskowski.gitbooks.io/mastering-spark-sql/content/spark-sql-Catalog.html>.

Spark usually complain with a `AnalysisException` error when you try to create SQL tables with this option undefined (or not configured). If you decide to follow the examples of this chapter, please always set this option right at the start of your script[^06-dataframes-sql-1].

[^06-dataframes-sql-1]: You can learn more about this specific option by looking at this StackOverflow post: <https://stackoverflow.com/questions/50914102/why-do-i-get-a-hive-support-is-required-to-create-hive-table-as-select-error>.

```{python}
#| eval: false
from pyspark.sql import SparkSession
spark = SparkSession\
  .builder\
  .config("spark.sql.catalogImplementation","hive")\
  .getOrCreate()
```



### `TABLEs` versus `VIEWs`

To run a complete SQL query over any Spark DataFrame, you must register this DataFrame in the Spark SQL Catalog of your Spark Session. You can register a Spark DataFrame into this catalog as a physical SQL `TABLE`, or, as a SQL `VIEW`. 

If you are familiar with SQL in other platforms, you probably already heard of these two types (`TABLE` or `VIEW`) of tables. But if not, we will explain each one in this section. Is worth pointing out that choosing between these two types **does not affect** your code, or your transformations in any way. It just affect the way that Spark SQL stores the table/DataFrame itself.

#### `VIEWs` are stored as SQL queries or memory pointers

When you register a DataFrame as a SQL `VIEW`, the query to produce this DataFrame is stored, not the DataFrame itself. There are also cases where Spark store a memory pointer instead, that points to the memory adress where this DataFrame is stored in memory. In this perspective, Spark SQL use this pointer every time it needs to access this DataFrame.

Therefore, when you call (or access) this SQL `VIEW` inside your SQL queries (for example, with a `SELECT * FROM` statement), Spark SQL will automatically get this SQL `VIEW` "on the fly" (or "on runtime"), by running the query necessary to build the initial DataFrame that you stored inside this `VIEW`, or, if this DataFrame is already stored in memory, Spark will look at the specific memory address it is stored.

In other words, when you create a SQL `VIEW`, Spark SQL do not store any physical data or rows of the table/DataFrame. It just stores the SQL query necessary to build your table/DataFrame, or, for temporary SQL `VIEWs`, a memory pointer to the Spark DataFrame that you stored in this `VIEW`. In some sense, you can interpret any SQL `VIEWs` as an abbreviation to a SQL query, or a nickname to an already existing DataFrame.

As a consequence, for most "use case scenarios", SQL `VIEWs` are easier to manage inside your data pipelines. Because you usually do not have to update them. Since they are calculated "on the fly", a SQL `VIEW` will always translate the most recent version of the data.

In `pyspark`, you can register a Spark DataFrame as a SQL `VIEW` with `createTempView` and `createOrReplaceTempView()` methods. These methods register your Spark DataFrame as a temporary SQL `VIEW`, and have a single input, which is the name you want to give to this new SQL `VIEW` you are creating inside a string:

```{python}
#| include: false
df.createOrReplaceTempView('example_view')
```

```{python}
#| eval: false
# To save the `df` DataFrame as a SQL VIEW, use one of the methods below:
df.createTempView('example_view')
df.createOrReplaceTempView('example_view')
```

After you registered your DataFrame, you can use it in any SQL query, like in the example below:

```{python}
sql_query = '''
SELECT *
FROM example_view
WHERE value > 20
'''

spark.sql(sql_query).show()
```

You could also save a specific SQL query as a persistent SQL `VIEW`, with a normal `CREATE VIEW` statement through the `sql()` method. In the example below, I am saving the simple query that I showed at the beginning of this chapter inside a `VIEW` called `list_of_codes`.

```{python}
sql_query = '''
CREATE OR REPLACE VIEW list_of_codes AS
SELECT *
FROM (
  VALUES (11), (31), (24), (35)
) AS List(Codes)
'''

spark.sql(sql_query)
```

Now, every time I want to use this SQL query that selects a list of codes, I can use this `list_of_codes` as a shortcut.

```{python}
spark.sql("SELECT * FROM list_of_codes").show()
```



#### `TABLEs` are stored as physical tables

In the other hand, SQL `TABLEs` are the "opposite" of SQL `VIEWs`. That is, SQL `TABLEs` are stored as physical tables inside the SQL database. In other words, each one of the rows of your table are stored inside the SQL database. 

Because of this characteristic, when dealing with huges amounts of data, SQL `TABLEs` are usually faster to load and transform. Because you just have to read the data stored on the database, you do not need to calculate it from scratch every time you use it. But, as a collateral effect, you usually have to physically update the data inside this `TABLE`, by using, for example, `INSERT INTO` statements.

In `pyspark`, you can save a Spark DataFrame as a SQL `TABLE` with the `write.saveAsTable()` method. This method accepts, as first input, the name you want to give to this SQL `TABLE` inside a string. 

```{python}
#| eval: false
# To save the `df` DataFrame as a SQL TABLE:
df.write.saveAsTable('example_table')
```

There are other arguments that you might want to use in this `write.saveAsTable()` method, like the `mode` argument. This argument controls if you want to rewrite/replace the entire table with the current data of your DataFrame (`mode = 'overwrite'`), or, if you just want to append (or insert) this data into the table (`mode = 'append'`). You can see the full list of arguments and their description by [looking at the documentation](<https://spark.apache.org/docs/3.1.2/api/python/reference/api/pyspark.sql.DataFrameWriter.saveAsTable>)^[<https://spark.apache.org/docs/3.1.2/api/python/reference/api/pyspark.sql.DataFrameWriter.saveAsTable>].

As you expect, after we registered the DataFrame as a SQL table, we can now run any SQL query over `example_table`, like in the example below:

```{python}
#| eval: false
spark.sql("SELECT SUM(value) FROM example_table").show()
```

```
+----------+
|sum(value)|
+----------+
|      76.8|
+----------+
```

You can also use pure SQL queries to create a empty SQL `TABLE` from scratch, and then, feed this table with data by using `INSERT INTO` statements. In the example below, we create a new database called `examples`, and, inside of it, a table called `code_brazil_states`. Then, we populated it with a few rows of data.

```{python}
#| include: false
#| eval: false
spark.sql('DROP DATABASE IF EXISTS `examples` cascade')
```


```{python}
#| eval: false
spark.sql('CREATE DATABASE `examples`')
spark.sql('USE `examples`')
spark.sql('''
  CREATE TABLE `code_brazil_states` (
    `code` INT,
    `state_name` STRING
  )
''')
spark.sql('INSERT INTO `code_brazil_states` VALUES (31, "Minas Gerais")')
spark.sql('INSERT INTO `code_brazil_states` VALUES (15, "Pará")')
spark.sql('INSERT INTO `code_brazil_states` VALUES (41, "Paraná")')
spark.sql('INSERT INTO `code_brazil_states` VALUES (25, "Paraíba")')
```

We can see now this new physical SQL table using a simple query like this:

```{python}
#| eval: false
spark\
  .sql('SELECT * FROM examples.code_brazil_states')\
  .show()
```

```
+----+------------+
|code|  state_name|
+----+------------+
|  41|      Paraná|
|  31|Minas Gerais|
|  15|        Pará|
|  25|     Paraíba|
+----+------------+
```

### Spark SQL Catalog is the bridge between SQL and `pyspark`

Remember, to run SQL queries over any Spark DataFrame, you must register this DataFrame into the Spark SQL Catalog. Because of it, this Spark SQL Catalog works almost as the bridge that connects the python objects that hold your Spark DataFrames to the Spark SQL context. Without it, Spark SQL will not find your Spark DataFrames. As a result, it can not run any SQL query over it.

When you try to use a DataFrame that is not currently registered at the Spark SQL Catalog, Spark will automatically raise a `AnalysisException`, like in the example below:

```python
spark\
  .sql("SELECT * FROM this.does_not_exist")\
  .show()
```

```
AnalysisException: Table or view not found
```

The methods `saveAsTable()`, `createTempView()` and `createOrReplaceTempView()` are the main methods to register your Spark DataFrame into this Spark SQL Catalog. This means that you have to use one of these methods before you run any SQL query over your Spark DataFrame.


### Temporary versus Persistent sources

When you register any Spark DataFrame as a SQL `TABLE`, it becomes a persistent source. Because the contents, the data, the rows of the table are stored on disk, inside a database, and can be accessed any time, even after you close or restart your computer (or your Spark Session). In other words, it becomes "persistent" as in the sense of "it does not die".

As another example, when you save a specific SQL query as a SQL `VIEW` with the `CREATE VIEW` statement, this SQL `VIEW` is saved inside the database. As a consequence, it becomes a persistent source as well, and can be accessed and reused in other Spark Sessions, unless you explicit drop (or "remove") this SQL `VIEW` with a `DROP VIEW` statement.

However, with methods like `createTempView()` and `createOrReplaceTempView()` you register your Spark DataFrame as a *temporary* SQL `VIEW`. This means that the life (or time of existence) of this `VIEW` is tied to your Spark Session. In other words, it will exist in your Spark SQL Catalog only for the duration of your Spark Session. When you close your Spark Session, this `VIEW` just dies. When you start a new Spark Session it does not exist anymore. As a result, you have to register your DataFrame again at the catalog to use it one more time.


## The `penguins` table

In the example below, I am reading a CSV file from my computer called `penguins.csv` (remember that this CSV can be downloaded from the book repository[^06-dataframes-sql-2]), then, I create a SQL temporary view (called `penguins_view`) from this `penguins` DataFrame with the `createOrReplaceTempView()` method.


[^06-dataframes-sql-2]: <https://github.com/pedropark99/Introd-pyspark/tree/main/Data>

```{python}
path = "../Data/penguins.csv"
penguins = spark.read\
  .csv(path, header = True)
  
penguins.createOrReplaceTempView('penguins_view')
```

After these commands, I have now a SQL view called `penguins_view` registered in my Spark SQL context, which I can query it, using pure SQL:

```{python}
spark.sql('SELECT * FROM penguins_view').show(5)
```


## Selecting your Spark DataFrames

An obvious way to access any SQL `TABLE` or `VIEW` registered in your Spark SQL context, is to select it, through a simple `SELECT * FROM` statement, like we saw in the previous examples. However, it can be quite annoying to type "SELECT * FROM" every time you want to use a SQL `TABLE` or `VIEW` in Spark SQL.

That is why Spark offers a shortcut to us, which is the `table()` method of your Spark session. In other words, the code `spark.table("table_name")` is a shortcut to `spark.sql("SELECT * FROM table_name")`. They both mean the same thing. For example, we could access `penguins_view` as:

```{python}
spark\
  .table('penguins_view')\
  .show(5)
```


## Every DataFrame transformation in Python can be translated into SQL


### DataFrame methods are usually translated into SQL keywords

When you translate the methods from the python `DataFrame` class (like `orderBy()`, `select()` and `where()`) into their equivalents in Spark SQL, you usually get SQL keywords (like `ORDER BY`, `SELECT` and `WHERE`).

### Spark functions are usually translated into SQL functions


Every function from the `pyspark.sql.functions` module you might use to describe your transformations in python, can be directly used in Spark SQL. In other words, every Spark function that is accesible in python, is also accesible in Spark SQL.

When you translate these python functions into SQL, they usually become a pure SQL function with the same name. 

## Executing SQL expressions

As I noted at @sec-columns-related-expressions, columns of a Spark DataFrame (or objects of class `Column`) are closely related to expressions. As a result, you usually use and execute expressions in Spark when you want to transform (or mutate) columns of a Spark DataFrame.

This is no different for SQL expressions. A SQL expression is basically any expression you would use on the `SELECT` statement of your SQL query. As you can probably guess, since they are used in the `SELECT` statement, these expressions are used to transform columns of a Spark DataFrame.

There are many column transformations that are particularly verbose and expensive to write in "pure" `pyspark`. But you can use a SQL expression in your favor, to translate this transformation into a more short and concise form. Virtually every expression you write in `pyspark` can be translated into a SQL expression.

To execute a SQL expression, you give this expression inside a string to the `expr()` function from the `pyspark.sql.functions` module. Since expressions are used to transform columns, you usually use `expr()` inside a `withColumn()` or `select()` method.

```{python}
from pyspark.sql.functions import expr

spark\
  .table('penguins_view')\
  .withColumn(
    'specie_island',
    expr("CONCAT(species, island)")
  )\
  .withColumn(
    'sex_short',
    expr("CASE WHEN sex == 'male' THEN 'M' ELSE 'F' END")
  )\
  .select('specie_island', 'sex_short')\
  .show(5)
```



