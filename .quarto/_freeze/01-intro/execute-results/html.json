{
  "hash": "d65ab7d2a7abe0ecf87fd83f8f8626e9",
  "result": {
    "markdown": "# Preface\n\nIn essence, `pyspark` is a python package that provides an API for Apache Spark. In other words, with `pyspark` you are able to use the python language to write Spark applications and run them on a Spark cluster in a scalable and elegant way. This book focus on teaching the fundamentals of `pyspark`, and how to use it for big data analysis.\n\nThis book, also contains a small introduction to key python concepts that are important to understand how `pyspark` is organized and how it works in practice, and, since we will be using Spark under the hood, is very important to understand a little bit of how Spark works, so, we provide a small introduction to Spark as well.\n\nBig part of the knowledge exposed here is extracted from a lot of practical experience of the author, working with `pyspark` to analyze big data at platforms such as Databricks^[https://databricks.com/].\n\n\n\n\n## Some conventions of this book\n\n### Python code and terminal commands\n\nThis book is about `pyspark`, which is a python package. As a result, we will be exposing a lot of python code across the entire book. Examples of python code, are always shown inside a gray rectangle, like this example below.\n\nEvery visible result that this python code produce, will be shown outside of the gray rectangle, just below the command that produced that visible result. Besides that, every line of result will always be written in plain black. So in the example below, the value `729` is the only visible result of this python code, and, the statement `print(y)` is the command that triggered this visible result.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nx = 3\ny = 9 ** x\n\nprint(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n729\n```\n:::\n:::\n\n\nFurthermore, all terminal commands that we expose in this book, will always be: pre-fixed by `Terminal$`; written in black; and, not outlined by a gray rectangle. In the example below, we can easily detect that this command `pip install jupyter` should be inserted in the terminal of the OS (whatever is the terminal that your OS uses), and not in the python interpreter, because this command is prefixed with `Terminal$`.\n\n\n```{verbatim}\nTerminal$ pip install jupyter\n```\n\n\nSome terminal commands may produce visible results as well. In that case, these results will be right below the respective command, and will not be pre-fixed with `Terminal$`. For example, we can see below that the command `echo \"Hello!\"` produces the result `\"Hello!\"`.\n\n\n```{verbatim}\nTerminal$ echo \"Hello!\"\n\"Hello!\"\n```\n\n\n### Python objects, functions and methods\n\nWhen I refer to some python object, function, method or package, I will use a monospaced font. In other words, if I have a python object called \"name\", and, I am describing this object, I will use `name` in the paragraph, and not \"name\". The same logic applies to functions, methods and package names.\n\n\n### Be aware of differences between OS's!\n\nSpark is available for all three main operational systems (or OS's) used in the world (Windows, MacOs and Linux). I will use constantly the word OS as an abbreviation to \"operational system\". \n\nThe snippets of python code shown throughout this book should just run correctly no matter which one of the three OS's you are using. In other words, the python code snippets are made to be portable. So you can just copy and paste them to your computer, no matter which OS you are using. \n\nBut, at some points, I may need to show you some terminal commands that are OS specific, and are not easily portable. For example, Linux have a package manager, but Windows does not have one. This means that, if you are on Linux, you will need to use some terminal commands to install some necessary programs (like python). In contrast, if you are on Windows, you will generally download executable files (`.exe`) that make this installation for you.\n\nIn cases like this, I will always point out the specific OS of each one of the commands, or, I will describe the necessary steps to be made on each one the OS's. Just be aware that these differences exists between the OS's.\n\n\n## Opening the terminal of your OS {#sec-open-terminal}\n\nEvery OS comes with a terminal (or command prompt), and you will find this tool very useful for a number of things. I will expose many terminal commands in this book, and these commands should be used inside these terminals that comes with your OS.\n\nThe next sub-sections will show you how to open a terminal in each one of the OS's where Spark is available. Lets begin with Windows.\n\n### Opening a terminal on Windows\n\nThere are some different approaches to do this, but, the one that I find the most useful, is to open a terminal from inside a Windows folder, using the default File Explorer program of Windows. When we use the terminal, we usually want to affect or use a file that is stored inside a folder in our computer, with a terminal command. \n\nBecause of that, when we open a terminal from inside a folder, the terminal opened is already rooted inside the folder where our file is stored. In other words, we already have easy access to the file that we want to affect/use in our command, and we do not have the work to change or adjust directories in this terminal.\n\nFor example, lets suppose that we want to use a terminal command to use a file called `hello.py`, and, that this `hello.py` file is stored inside a folder called `HelloPython`. You can see in @fig-windows-hello-folder, that this folder is in path `C:\\Users\\pedro\\Documents\\HelloPython`. So, the first step, is to use the File Explorer of Windows, to open this folder, like in @fig-windows-hello-folder.\n\n![Opening the `HelloPython` folder in Windows](Figures/windows-hello-folder.png){#fig-windows-hello-folder fig-align=\"center\"}\n\n\nAfter you opened this folder, substitute the path to the folder in the search box with the word \"cmd\", like in @fig-windows-hello-folder2, and them, press Enter in the keyboard.\n\n![Opening a terminal inside a Windows folder - Part 1](Figures/windows-hello-folder2.png){#fig-windows-hello-folder2 fig-align=\"center\"}\n\n\nAs a result, a new terminal will open. See in @fig-windows-terminal, that this new terminal is already looking to (or is already rooted on) this `HelloPython` folder. This way, we can easily access the files stored inside this folder, like the `hello.py` file.\n\n![Opening a terminal inside a Windows folder - Part 2](Figures/windows-terminal.png){#fig-windows-terminal fig-align=\"center\"}\n\n\n### Opening a terminal on Linux\n\nIs fairly easy to open a terminal on a Linux distribution. Again, is very useful when you open the terminal from inside the folder you are interested in. Because you will have an easier access to all the files that are stored inside this folder.\n\nTo do this in Linux, you use the built-in File Explorer to open the folder where you want to root your terminal. At the moment, I am using an Ubuntu distribution. I just opened the same `HelloPython` folder, with the same `hello.py` file, in the File Explorer of Linux. As shown in @fig-ubuntu-folder:\n\n![Opening the `HelloPython` folder in Linux](Figures/ubuntu-folder.png){#fig-ubuntu-folder fig-align=\"center\"}\n\nAfter you opened the folder, just click with the right button of your mouse, and select the \"Open in Terminal\" option, and a new terminal should appear on your screen. See in @fig-ubuntu-folder-terminal, that the new terminal is already looking to the `HelloPython` folder, as we expected.\n\n![Opening the terminal in Linux](Figures/ubuntu-folder-terminal.png){#fig-ubuntu-folder-terminal fig-align=\"center\"}\n\n### Opening a terminal in MacOs\n\nUnfortunately, I do not have a Mac machine in my possession, so I cannot easily show you how to open a terminal in MacOs. But there a lot of articles available in the internet discussing how to open a terminal in MacOs. For example, there is a article from the support of Apple^[https://support.apple.com/en-ie/guide/terminal/apd5265185d-f365-44cb-8b09-71a064a42125/mac], or this other article from iDownloadBlog^[https://www.idownloadblog.com/2019/04/19/ways-open-terminal-mac/].\n\n\n## First step: install the necessary software {#sec-install-software}\n\nBefore we start, is really important that you have all the software you need already installed on your machine and ready to go. `Spark` and, as a result, `pyspark`, are both available for Windows and UNIX-like systems (e.g. Linux and MacOs). To use `pyspark` you need to install: 1) `Spark`; 2) Python; 3) and the python package called `pyspark`. \n\nInstall and manage `Spark` in Windows is a little harder than in a UNIX-like machine. But it's perfectly ok if you do not have a UNIX machine. A Windows machine will do it just fine. Just for referencing, the examples showed throughout this book were executed in a Linux machine (more specifically, in Ubuntu).\n\n### Install python\n\nTo install python on Windows, you can download the executable files at the official Python website^[https://www.python.org/downloads/]. But, if you are on Linux, you can install python with the package manager, by opening a terminal and running the following command:\n\n\n```{terminal}\nsudo apt-get install python3\n```\n\n\n\n### Install `pyspark`\n\nInstalling the `pyspark` python package is pretty straightforward. Just open a terminal (if you need help to open the terminal check @sec-open-terminal), and use the `pip` command to do it:\n\n\n```{terminal}\nTerminal$ pip install pyspark\n```\n\n\nIf you try to run the above command (inside a terminal of any OS), and a message like `pip: command not found` appears, this means that you do not have the `pip` tool installed on your machine. Hence, if you face this kind of message, you need to install `pip` before you even install `pyspark`.\n\nThe `pip` tool is automatically installed with Python on Windows. So, if you face this message (`pip: command not found`), then, is very likely that you do not have Python correctly installed on your machine. Or maybe, Python is not installed at all in any shape or size in your system. So, you should comeback to previous section, and re install it.\n\nIn UNIX-like systems, installing `pip` is very easy, because you can use the built-in package manager to do this for you. In Debian like distros (e.g. Ubuntu), you use the `apt` tool, and, in Arch-Linux like distros (e.g. Arch Linux, Manjaro) you would use the `pacman` tool. Both possibilities are exposed below:\n\n\n```{terminal}\n# If you are in a Debian like distro of Linux\n# and need to install `pip`, use this command:\nTerminal$ apt install python3-pip\n# If you are in a Arch-Linux like distro of Linux\n# and need to install `pip`, use this command:\nTerminal$ pacman -S python-pip\n```\n\n\nBut, if you are running in MacOs, is best to use the `get-pip.py` method to do install `pip`^[See the following discussion: https://stackoverflow.com/questions/17271319/how-do-i-install-pip-on-macos-or-os-x]. To use this method, try to run the command below on the terminal. After you installed pip, run the same `pip` command we showed earlier to install `pyspark`.\n\n\n```{terminal}\n# To install `pip` on a MacOs:\nTerminal$ curl https://bootstrap.pypa.io/get-pip.py | python3\n```\n\n\nAfter you correctly installed `pip`, try to execute the first command again, to install the `pyspark` package on your machine.\n\n\n### Install `Spark`\n\n",
    "supporting": [
      "01-intro_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}