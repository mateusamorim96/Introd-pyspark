{"title":"A small introduction to the python language","markdown":{"headingText":"A small introduction to the python language","containsRefs":false,"markdown":"\n\nIf you have experience with python, and understands how objects and classes works, you might want to skip this entire chapter. But, if you are new to the language and do not have much experience with it, you might want to stick a little bit, and learn a few key concepts that will help you to understand how the `pyspark` package is organized, and how to work with it.\n\n## Scripts\n\nPython programs are written in plain text files that are saved with the `.py` extension. After you save these files, they are usually called \"scripts\". So a script is just a text file that contains all the commands that make your python program.\n\nThere are many IDEs or programs that help you to write, manage and organize this kind of files (like Microsoft Visual Studio Code[^python-1], PyCharm[^python-2], Anaconda[^python-3] and RStudio[^python-4]). But, if you do not have any of them installed, you can just create a new plain text file from the built-in Notepad program of your OS (operational system), and, save it with the `.py` extension.\n\n[^python-1]: https://code.visualstudio.com/\n\n[^python-2]: https://www.jetbrains.com/pycharm/\n\n[^python-3]: https://www.anaconda.com/products/distribution\n\n[^python-4]: https://www.rstudio.com/\n\n## How to run a python program\n\nThere are many ways to run a python program, but I will show you the more \"standard\" way. That is to use the `python` command inside the terminal of your OS.\n\nAs an example, lets create a simple \"Hello world\" program. Create a text file called `hello.py`, then copy and paste the following command into this file, then save it somewhere in your machine:\n\n```{python}\n#| eval: false\nprint(\"Hello World!\")\n```\n\nIt will be much easier to run this script, if you open the terminal inside the folder where you save the `hello.py` file. On Linux, with the built-in File Explorer, you can click (with the right button of you mouse) inside the folder, and you will have an option to open the terminal. If you are on windows, you can open the folder on the File Explorer, then, overwrite the path to this folder with \"cmd\" and press Enter.\n\nBut, if for some reason you could not open the terminal inside the folder. Then, you can just open terminal (in any way you can), then, use the `cd` command (stands for \"change directory\") with the path to the folder where you saved `hello.py`. This way, your terminal will be rooted on this folder.\n\nFor example, if I saved `hello.py` inside my Documents folder, the path to this folder in Windows would be something like this: `\"C:\\Users\\pedro\\Documents\"`. On the other hand, this path on Linux would be something like `\"/usr/pedro/Documents\"`. So the command to change to this directory would be:\n\n```{verbatim}\n# On Windows:\nTerminal$ cd \"C:\\Users\\pedro\\Documents\"\n# On Linux:\nTerminal$ cd \"/usr/pedro/Documents\"\n```\n\nAfter this `cd` command, you just run the `python hello.py` command in the terminal. As a result, the `hello.py` will be executed, and, the text `Hello World!` should be printed to the terminal.\n\n```{verbatim}\nTerminal$ python hello.py\nHello World!\n```\n\nThere you have it! So every time you need to run your python program, just open a terminal and run the command `python <path to your script>`. If the terminal is rooted on the folder where you saved your script, you can just use the `python <name of the file>` command.\n\n## Objects\n\nAlthough python is a general-purpose language, most of its features are focused on object-oriented programming. Meaning that, python is a programming language focused on creating, managing and modifying objects and classes of objects.\n\nSo, when you work with python, you are basically applying many operations and functions over a set of objects. In essence, an object in python, is a name that refers to a set of data. This data can be anything that you computer can store (or represent).\n\nHaving that in mind, an object is just a name, and this name is a reference, or a key to access some data. To define an object in python, you must use the assignment operator, which is the equal sign (`=`). In the example below, we are defining, or, creating an object called `x`, and it stores the value 10. Therefore, with the name `x` we can access this value of 10.\n\n```{python}\nx = 10\nprint(x)\n```\n\nWhen we store a value inside an object, we can easily reuse this value in multiple operations or expressions:\n\n```{python}\n# Multiply by 2\nprint(x * 2)\n```\n\n```{python}\n# Divide by 3\nprint(x / 3)\n```\n\n```{python}\n# Print its class\nprint(type(x))\n```\n\nRemember, an object can store any type of value, or any type of data. For example, it can store a single string, like the object `salutation` below:\n\n```{python}\nsalutation = \"Hello! My name is Pedro\"\n```\n\nOr, a list of multiple strings:\n\n```{python}\nnames = [\n  \"Anne\", \"Vanse\", \"Elliot\",\n  \"Carlyle\", \"Ed\", \"Memphis\"\n]\n\nprint(names)\n```\n\nOr a dict containing the description of a product:\n\n```{python}\nproduct = {\n  'name': 'Coca Cola',\n  'volume': '2 litters',\n  'price': 2.52,\n  'group': 'non-alcoholic drinks',\n  'department': 'drinks'\n}\n\nprint(product)\n```\n\nAnd many other things...\n\n## Expressions\n\nPython programs are organized in blocks of expressions (or statements). A python expression is a statement that describes an operation to be performed by the program. For example, the expression below describes the sum between 3 and 5.\n\n```{python}\n3 + 5\n```\n\nThe expression above is composed of numbers (like 3 and 5) and a operator, more specifically, the sum symbol (`+`). But any python expression can include a multitude of different items. It can be composed of functions (like `print()`, `map()` and `str()`), constant strings (like `\"Hello World!\"`), logical operators (like `!=`, `<`, `>` and `==`), arithmetic operators (like `*`, `/`, `**`, `%`, `-` and `+`), structures (like lists, arrays and dicts) and many other types of commands.\n\nBelow we have a more complex example, that contains the `def` keyword (which starts a function definition; in the example below, this new function being defined is `double()`), many built-in functions (`list()`, `map()` and `print()`), a arithmetic operator (`*`), numbers and a list (initiated by the pair of brackets - `[]`).\n\n```{python}\ndef double(x):\n  return x * 2\n  \nprint(list(map(double, [4, 2, 6, 1])))\n```\n\nPython expressions are evaluated in a sequential manner (from top to bottom of your python file). In other words, python runs the first expression in the top of your file, them, goes to the second expression, and runs it, them goes to the third expression, and runs it, and goes on and on in that way, until it hits the end of the file. So, in the example above, python executes the function definition (initiated at `def double(x):`), before it executes the `print()` statement, because the print statement is below the function definition.\n\nThis order of evaluation is commonly referred as \"control flow\" in many programming languages. Sometimes, this order can be a fundamental part of the python program. Meaning that, sometimes, if we change the order of the expressions in the program, we can produce unexpected results (like an error), or change the results produced by the program.\n\nAs an example, the program below prints the result 4, because the print statement is executed before the expression `x = 40`.\n\n```{python}\nx = 1\n\nprint(x * 4)\n\nx = 40\n```\n\nBut, if we execute the expression `x = 40` before the print statement, we then change the result produced by the program.\n\n```{python}\nx = 1\nx = 40\n\nprint(x * 4)\n```\n\nIf we go a little further, and, put the print statement as the first expression of the program, we then get a name error. This error warns us that, the object named `x` is not defined (i.e. it does not exist).\n\n```{python}\n#| eval: false\nprint(x * 4)\n```\n\n```{verbatim}\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'x' is not defined\n```\n\n```{python}\nx = 1\nx = 40\n```\n\nThis error occurs, because inside the print statement, we call the name `x`. But, this is the first expression of the program, and at this point of the program, we did not defined a object called `x`. We make this definition, after the print statement, with `x = 1` and `x = 40`. In other words, at this point, python do not know any object called `x`.\n\n## Packages\n\nA python package (or a python \"library\") is basically a set of functions and classes that provides important functionality to solve a specific problem. And pyspark is one of these many available python packages.\n\nPython packages are usually published (that is, made available to the public) through the PyPI archive[^python-5]. If a python package is published in PyPI, then, you can easily install this package through the `pip` tool.\n\n[^python-5]: https://pypi.org/\n\nTo use any of the tools provided in a python package, you always need to: 1) have this package installed on your machine; 2) import this python package to your session. If a package is not installed in your machine, you will face a `ModuleNotFoundError`, like in the example below. So, if your program produce such an error, is very likely that this package is not currently installed on your machine. To install it, you may use the `pip install <name of the package>` command on the terminal.\n\n```{python}\n#| eval: false\nimport a_package\n```\n\n```{verbatim}\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nModuleNotFoundError: No module named 'a_package'\n```\n\nIf this package is already installed in your machine, then, you can just import it to your session, and start to use its functionality. To import any package to your python session, you just include an `import` statement at the start of your python file. For example, if I wanted to use the `DataFrame` function from the `pandas` package:\n\n\n```{python}\nimport pandas\n\ndf = pandas.DataFrame([\n  (1, 3214), (2, 4510), \n  (1, 9082), (4, 7822)\n])\n\nprint(df)\n```\n\n\n\n\nThe many functions and classes that are available in a python package, are usually organized in \"modules\". For example, the famous `flask` package contains many modules, such as `cli`, `globals`, `views` and `sessions`. To access the functions available in each one of these modules, you use the dot operator.\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"02-python.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"0.9.305","bibliography":["references.bib"],"theme":"cosmo"},"extensions":{"book":{"multiFile":true}}},"pdf":{"execute":{"fig-width":6.5,"fig-height":4.5,"fig-format":"pdf","fig-dpi":300,"error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"02-python.pdf"},"language":{},"metadata":{"block-headings":true,"bibliography":["references.bib"],"documentclass":"scrreprt"},"extensions":{"book":{}}}}}