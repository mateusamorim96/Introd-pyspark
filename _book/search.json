[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction to pyspark",
    "section": "",
    "text": "Hello! This is the initial page!"
  },
  {
    "objectID": "01-intro.html",
    "href": "01-intro.html",
    "title": "2  Preface",
    "section": "",
    "text": "In essence, pyspark is a python package that provides an API for the Spark SQL module. In other words, with pyspark you are able to use the python language to program SQL queries and run them on a Spark cluster in a scalable and elegant way. This book focus on teaching the fundamentals of pyspark, and how to use it for big data analysis.\nThis book, also contains a small introduction to key python concepts that are important to understand how pyspark is organized and how it works in practice, and, since we will be using Spark under the hood, is very important to understand a little bit of how Spark works, so, we provide a small introduction to Spark key concepts as well.\nBig part of the knowledge exposed here is extracted from a lot of practical experience of the author, working with pyspark to analyze big data at platforms such as Databricks1."
  },
  {
    "objectID": "01-intro.html#some-conventions-of-this-book",
    "href": "01-intro.html#some-conventions-of-this-book",
    "title": "2  Preface",
    "section": "2.1 Some conventions of this book",
    "text": "2.1 Some conventions of this book\nThis book is about pyspark, which is a python package. As a result, we will be exposing a lot of python code across the entire book. Examples of python code, are always shown inside a gray rectangle, like this example below.\nEvery visible result that this python code produce, will be shown outside of the gray rectangle, just below the command that produced that visible result. Besides that, every line of result will always be written in plain black. So in the example below, the value 729 is the only visible result of this python code, and, the statement print(y) is the command that triggered this result.\n\nx = 3\ny = 9 ** x\n\nprint(y)\n\n729\n\n\nFurthermore, all terminal commands that we expose in this book, will always be: pre-fixed by Terminal$; written in black; and, not outlined by a gray rectangle. In the example below, we can easily detect that this command pip install jupyter should be inserted in the terminal of the OS (whatever is the terminal that your OS uses), and not in the python interpreter, because this command is prefixed with Terminal$.\nTerminal$ pip install jupyter\nSome terminal commands may produce visible results as well. In that case, these results will be right below the respective command, and will not be pre-fixed with Terminal$. For example, we can see below that the command echo \"Hello!\" produces the result \"Hello!\".\nTerminal$ echo \"Hello!\"\n\"Hello!\""
  },
  {
    "objectID": "01-intro.html#first-step-install-the-necessary-software",
    "href": "01-intro.html#first-step-install-the-necessary-software",
    "title": "2  Preface",
    "section": "2.2 First step: install the necessary software",
    "text": "2.2 First step: install the necessary software\nBefore we start, is really important that you have all the software you need already installed on your machine and ready to go. Spark and, as a result, pyspark, are both available for Windows and UNIX-like systems (e.g. Linux and MacOs).\nInstall and manage spark in Windows is a little harder than in a UNIX-like machine. But it’s perfectly ok if do not have a UNIX machine. A Windows machine will do it just fine. Just for referencing, the examples showed throughout this book were executed in a Linux machine (more specifically, in Ubuntu).\nSo, to use pyspark you need to install a spark distribution, and, the python package called pyspark. Installing the pyspark python package is pretty straightforward. Just open a terminal, and use the pip command to do it:\nTerminal$ pip install pyspark\nIf you are in Windows, this would mean: open the cmd.exe terminal, and, run the above command. But, if a message like pip: command not found appears, this means that you do not have the pip tool installed on your Windows. Hence, if you face this kind of message, you need to install pip before you even install pyspark.\nIn contrast, if you are running on a Linux or MacOs machine, you need to open a bash terminal (most distros of Linux can open a terminal by pressing the Ctrl+Alt+T shortcut on the keyboard), and, run the exact same command above. Again, if a message like pip: command not found appears, it means that pip is not installed on your system.\nIn UNIX-like systems, installing pip is even easier, because you can use the built-in package manager to do this for you. In Debian like distros (e.g. Ubuntu), you use the apt tool, and, in Arch-Linux like distros (e.g. Arch Linux, Manjaro) you would use the pacman tool. Both possibilities are exposed below:\n# If you are in a Debian like distro of Linux\n# and need to install `pip`, use this command:\nTerminal$ apt install python3-pip\n# If you are in a Arch-Linux like distro of Linux\n# and need to install `pip`, use this command:\nTerminal$ pacman -S python-pip\nBut, if you are running in MacOs, is best to use the get-pip.py method to do install pip2. To use this method, try to run the command below on the terminal. After you installed pip, run the same pip command we showed earlier to install pyspark.\n# To install `pip` on a MacOs:\nTerminal$ curl https://bootstrap.pypa.io/get-pip.py | python3"
  },
  {
    "objectID": "02-python.html",
    "href": "02-python.html",
    "title": "3  A small introduction to the python language",
    "section": "",
    "text": "If you have experience with python, and understand how objects and classes works in the language, you might want to skip this entire chapter. But, if you are new to the language and do not have much experience with it, you might want to stick a little bit, and learn a few key concepts that will help you to understand how the pyspark package is organized, and how to work with it."
  },
  {
    "objectID": "02-python.html#scripts",
    "href": "02-python.html#scripts",
    "title": "3  A small introduction to the python language",
    "section": "3.1 Scripts",
    "text": "3.1 Scripts\nPython programs are written in plain text files that are saved with the .py extension. After you save these files, they are usually called “scripts”. So a script is just a text file that contains all the commands that make your python program.\nThere are many IDEs or programs that help you to write, manage and organize this kind of files (like Microsoft Visual Studio Code1, PyCharm2, Anaconda3 and RStudio4). But, if you do not have any of them installed, you can just create a new plain text file from the built-in Notepad program of your OS (operational system), and, save it with the .py extension."
  },
  {
    "objectID": "02-python.html#how-to-run-a-python-program",
    "href": "02-python.html#how-to-run-a-python-program",
    "title": "3  A small introduction to the python language",
    "section": "3.2 How to run a python program",
    "text": "3.2 How to run a python program\nThere are many ways to run a python program, but I will show you the more “standard” way. That is to use the python command inside the terminal of your OS.\nAs an example, lets create a simple “Hello world” program. Create a text file called hello.py, then copy and paste the following command into this file, then save it somewhere in your machine:\n\nprint(\"Hello World!\")\n\nIt will be much easier to run this script, if you open the terminal inside the folder where you save the hello.py file. On Linux, with the built-in File Explorer, you can click (with the right button of you mouse) inside the folder, and you will have an option to open the terminal. If you are on windows, you can open the folder on the File Explorer, then, overwrite the path to this folder with “cmd” and press Enter.\nBut, if for some reason you could not open the terminal inside the folder. Then, you can just open terminal (in any way you can), then, use the cd command (stands for “change directory”) with the path to the folder where you saved hello.py. This way, your terminal will be rooted on this folder.\nFor example, if I saved hello.py inside my Documents folder, the path to this folder in Windows would be something like this: \"C:\\Users\\pedro\\Documents\". On the other hand, this path on Linux would be something like \"/usr/pedro/Documents\". So the command to change to this directory would be:\n# On Windows:\nTerminal$ cd \"C:\\Users\\pedro\\Documents\"\n# On Linux:\nTerminal$ cd \"/usr/pedro/Documents\"\nAfter this cd command, you just run the python hello.py command in the terminal. As a result, the hello.py will be executed, and, the text Hello World! should be printed to the terminal.\nTerminal$ python hello.py\nHello World!\nThere you have it! So every time you need to run your python program, just open a terminal and run the command python <path to your script>. If the terminal is rooted on the folder where you saved your script, you can just use the python <name of the file> command."
  },
  {
    "objectID": "02-python.html#objects",
    "href": "02-python.html#objects",
    "title": "3  A small introduction to the python language",
    "section": "3.3 Objects",
    "text": "3.3 Objects\nAlthough python is a general-purpose language, most of its features are focused on object-oriented programming. Meaning that, python is a programming language focused on creating, managing and modifying objects and classes of objects.\nSo, when you work with python, you are basically applying many operations and functions over a set of objects. In essence, an object in python, is a name that refers to a set of data. This data can be anything that you computer can store (or represent).\nHaving that in mind, an object is just a name, and this name is a reference, or a key to access some data. To define an object in python, you must use the assignment operator, which is the equal sign (=). In the example below, we are defining, or, creating an object called x, and it stores the value 10. Therefore, with the name x we can access this value of 10.\n\nx = 10\nprint(x)\n\n10\n\n\nWhen we store a value inside an object, we can easily reuse this value in multiple operations or expressions:\n\n# Multiply by 2\nprint(x * 2)\n\n20\n\n\n\n# Divide by 3\nprint(x / 3)\n\n3.3333333333333335\n\n\n\n# Print its class\nprint(type(x))\n\n<class 'int'>\n\n\nRemember, an object can store any type of value, or any type of data. For example, it can store a single string, like the object salutation below:\n\nsalutation = \"Hello! My name is Pedro\"\n\nOr, a list of multiple strings:\n\nnames = [\n  \"Anne\", \"Vanse\", \"Elliot\",\n  \"Carlyle\", \"Ed\", \"Memphis\"\n]\n\nprint(names)\n\n['Anne', 'Vanse', 'Elliot', 'Carlyle', 'Ed', 'Memphis']\n\n\nOr a dict containing the description of a product:\n\nproduct = {\n  'name': 'Coca Cola',\n  'volume': '2 litters',\n  'price': 2.52,\n  'group': 'non-alcoholic drinks',\n  'department': 'drinks'\n}\n\nprint(product)\n\n{'name': 'Coca Cola', 'volume': '2 litters', 'price': 2.52, 'group': 'non-alcoholic drinks', 'department': 'drinks'}\n\n\nAnd many other things…"
  },
  {
    "objectID": "02-python.html#expressions",
    "href": "02-python.html#expressions",
    "title": "3  A small introduction to the python language",
    "section": "3.4 Expressions",
    "text": "3.4 Expressions\nPython programs are organized in blocks of expressions (or statements). A python expression is a statement that describes an operation to be performed by the program. For example, the expression below describes the sum between 3 and 5.\n\n3 + 5\n\n8\n\n\nThe expression above is composed of numbers (like 3 and 5) and a operator, more specifically, the sum symbol (+). But any python expression can include a multitude of different items. It can be composed of functions (like print(), map() and str()), constant strings (like \"Hello World!\"), logical operators (like !=, <, > and ==), arithmetic operators (like *, /, **, %, - and +), structures (like lists, arrays and dicts) and many other types of commands.\nBelow we have a more complex example, that contains the def keyword (which starts a function definition; in the example below, this new function being defined is double()), many built-in functions (list(), map() and print()), a arithmetic operator (*), numbers and a list (initiated by the pair of brackets - []).\n\ndef double(x):\n  return x * 2\n  \nprint(list(map(double, [4, 2, 6, 1])))\n\n[8, 4, 12, 2]\n\n\nPython expressions are evaluated in a sequential manner (from top to bottom of your python file). In other words, python runs the first expression in the top of your file, them, goes to the second expression, and runs it, them goes to the third expression, and runs it, and goes on and on in that way, until it hits the end of the file. So, in the example above, python executes the function definition (initiated at def double(x):), before it executes the print() statement, because the print statement is below the function definition.\nThis order of evaluation is commonly referred as “control flow” in many programming languages. Sometimes, this order can be a fundamental part of the python program. Meaning that, sometimes, if we change the order of the expressions in the program, we can produce unexpected results (like an error), or change the results produced by the program.\nAs an example, the program below prints the result 4, because the print statement is executed before the expression x = 40.\n\nx = 1\n\nprint(x * 4)\n\nx = 40\n\n4\n\n\nBut, if we execute the expression x = 40 before the print statement, we then change the result produced by the program.\n\nx = 1\nx = 40\n\nprint(x * 4)\n\n160\n\n\nIf we go a little further, and, put the print statement as the first expression of the program, we then get a name error. This error warns us that, the object named x is not defined (i.e. it does not exist).\n\nprint(x * 4)\n\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'x' is not defined\n\nx = 1\nx = 40\n\nThis error occurs, because inside the print statement, we call the name x. But, this is the first expression of the program, and at this point of the program, we did not defined a object called x. We make this definition, after the print statement, with x = 1 and x = 40. In other words, at this point, python do not know any object called x."
  },
  {
    "objectID": "02-python.html#packages",
    "href": "02-python.html#packages",
    "title": "3  A small introduction to the python language",
    "section": "3.5 Packages",
    "text": "3.5 Packages\nA python package (or a python “library”) is basically a set of functions and classes that provides important functionality to solve a specific problem. And pyspark is one of these many available python packages.\nPython packages are usually published (that is, made available to the public) through the PyPI archive5. If a python package is published in PyPI, then, you can easily install this package through the pip tool.\nTo use any of the tools provided in a python package, you always need to import this python package to your session. To do this, you must include an import statement at the start of your python file.\nThe many functions and classes that are available in a python package, are usually organized in “modules”. For example, the famous flask package contains many modules, such as cli, globals, views and sessions. To access the functions available in each one of these modules, you use the dot operator."
  }
]